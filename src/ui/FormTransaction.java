 package ui;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import core.models.requests.MemberNumberRequest;
import core.models.requests.TransactionDetailRequest;
import core.models.requests.TransactionRequest;
import core.models.responses.BaseResponse;
import core.models.responses.MemberNumberResponse;
import core.models.responses.ProductListResponse;
import helpers.HttpHelper;
import helpers.JdbcHelper;
import helpers.MapperHelper;
import helpers.MessageHelper;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Abui
 */
public class FormTransaction extends javax.swing.JFrame {
    
    List<ProductListResponse> products = new ArrayList<ProductListResponse>();
    TransactionRequest transactionRequest = new TransactionRequest();
    DefaultTableModel model;

    /**
     * Creates new form FormTransaction
     */
    public FormTransaction() {
        initComponents();
        getProducts();
        this.model = (DefaultTableModel) tTransaction.getModel();
        model.setRowCount(0);
    }
    
    
     private void getProducts() {
        try {
            String token = JdbcHelper.getToken();
            String response = HttpHelper.get("products", token);
            
            ObjectMapper mapper = MapperHelper.getMapper();
            BaseResponse<List<ProductListResponse>> br = mapper.readValue(response, new TypeReference<BaseResponse<List<ProductListResponse>>>() {});
            
            List<ProductListResponse> products = br.getData();
            this.products = products;
            
            for (ProductListResponse product : products) {
                cbProduct.addItem(new Item(product.getId(), product.getName()));
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(FormUser.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FormUser.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(FormUser.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
     



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cbProduct = new javax.swing.JComboBox<>();
        bTambah = new javax.swing.JButton();
        Transaksi = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tTransaction = new javax.swing.JTable();
        Transaksi1 = new javax.swing.JLabel();
        totalHarga = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        bTambah1 = new javax.swing.JButton();
        memberNoTf = new javax.swing.JTextField();
        memberNameLabel = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        bTambah.setText("Tambah Ke List");
        bTambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bTambahActionPerformed(evt);
            }
        });

        Transaksi.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        Transaksi.setText("Transaksi");

        tTransaction.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Item Name", "Price", "Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tTransaction.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tTransactionKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tTransaction);

        Transaksi1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        Transaksi1.setText("Total");

        totalHarga.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        totalHarga.setText("Rp0");

        jButton1.setText("Buat Transaksi");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        bTambah1.setText("Hapus list yang dipilih");
        bTambah1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bTambah1ActionPerformed(evt);
            }
        });

        memberNoTf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                memberNoTfKeyPressed(evt);
            }
        });

        memberNameLabel.setText("-");

        jButton2.setText("Kembali");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(totalHarga)
                                    .addComponent(Transaksi1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(memberNameLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(bTambah1)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 635, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 6, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cbProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(bTambah)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(memberNoTf))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Transaksi)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2)
                        .addGap(24, 24, 24))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Transaksi)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbProduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bTambah)
                    .addComponent(memberNoTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bTambah1)
                        .addGap(10, 10, 10))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(memberNameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Transaksi1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(totalHarga))
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bTambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bTambahActionPerformed
        int rows = tTransaction.getRowCount();
        ProductListResponse item = this.products.get(cbProduct.getSelectedIndex());        
        String data[] = {String.valueOf(item.getId()), item.getName(), String.valueOf(item.getPrice()), "1"};
        model.addRow(data);
        
        int total = 0;
        for (int i = 0; i < model.getRowCount(); i++) {
            int qty = Integer.parseInt(model.getValueAt(i, 3).toString());
            int price = Integer.parseInt(model.getValueAt(i, 2).toString());
            
            total += qty * price;
        }
        
        totalHarga.setText("Rp" + total);
    }//GEN-LAST:event_bTambahActionPerformed

    private void bTambah1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bTambah1ActionPerformed
        int index = tTransaction.getSelectedRow();
        
        if (index != -1) {
            model.removeRow(index);
            int total = 0;
            for (int i = 0; i < model.getRowCount(); i++) {
                int qty = Integer.parseInt(model.getValueAt(i, 3).toString());
                int price = Integer.parseInt(model.getValueAt(i, 2).toString());

                total += qty * price;
            }

            totalHarga.setText("Rp" + total);
        }
    }//GEN-LAST:event_bTambah1ActionPerformed

    private void memberNoTfKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_memberNoTfKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            try {
                ObjectMapper mapper = MapperHelper.getMapper();
                MemberNumberRequest request = new MemberNumberRequest(memberNoTf.getText());
                
                String token = JdbcHelper.getToken();
                String body = mapper.writeValueAsString(request);
                String response = HttpHelper.post("members/validate", body, token);
                
                BaseResponse<MemberNumberResponse> br = mapper.readValue(response, new TypeReference<BaseResponse<MemberNumberResponse>>(){});
                MemberNumberResponse data = br.getData();

                if (br.getCode().equals("0000")) {
                    MessageHelper.Success("Success", data.getName() + " " + data.getPoint());
                    memberNameLabel.setText(data.getName());
                    transactionRequest.setMemberId(data.getId());
                } else {
                    MessageHelper.Error("Error", br.getMessage());
                }
            } catch (IOException | InterruptedException ex) {
                Logger.getLogger(FormLoginRegister.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(FormTransaction.class.getName()).log(Level.SEVERE, null, ex);
            } 
        }
    }//GEN-LAST:event_memberNoTfKeyPressed

    private void tTransactionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tTransactionKeyPressed
         if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            int total = 0;
            for (int i = 0; i < model.getRowCount(); i++) {
                int qty = Integer.parseInt(model.getValueAt(i, 3).toString());
                int price = Integer.parseInt(model.getValueAt(i, 2).toString());

                total += qty * price;
            }

            totalHarga.setText("Rp" + total);
         }
    }//GEN-LAST:event_tTransactionKeyPressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int rows = model.getRowCount();
        
        for (int i = 0; i < rows; i++) {
            int id = Integer.parseInt(model.getValueAt(i, 0).toString());
            int qty = Integer.parseInt(model.getValueAt(i, 3).toString());
            TransactionDetailRequest request = new TransactionDetailRequest(id, qty);
            transactionRequest.addDetails(request);
        }
                
        ObjectMapper mapper = MapperHelper.getMapper();
        String body;
        try {
            body = mapper.writeValueAsString(transactionRequest);
            String response = HttpHelper.post("transactions", body, JdbcHelper.getToken());
            
            BaseResponse br = mapper.readValue(response, BaseResponse.class);
            
            if (br.isSuccess()) {
                MessageHelper.Success("Success", "Transaksi sukses!");
                model.getRowCount();
                totalHarga.setText("Rp0");
                transactionRequest = new TransactionRequest();
            } else {
                MessageHelper.Error("Error", "Gagal menambahkan transaksi");
            }
            
        } catch (JsonProcessingException ex) {
            Logger.getLogger(FormTransaction.class.getName()).log(Level.SEVERE, null, ex);
        }catch (SQLException ex) {
            Logger.getLogger(FormTransaction.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FormTransaction.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(FormTransaction.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        MainMenu mm = new MainMenu();
        mm.setVisible(true);
        super.setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormTransaction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormTransaction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormTransaction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormTransaction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormTransaction().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Transaksi;
    private javax.swing.JLabel Transaksi1;
    private javax.swing.JButton bTambah;
    private javax.swing.JButton bTambah1;
    private javax.swing.JComboBox<Item> cbProduct;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel memberNameLabel;
    private javax.swing.JTextField memberNoTf;
    private javax.swing.JTable tTransaction;
    private javax.swing.JLabel totalHarga;
    // End of variables declaration//GEN-END:variables
}

class Item {
  int intValue;
  String strValue;

  public Item(int intValue, String strValue) {
    this.intValue = intValue;
    this.strValue = strValue;
  }

  public String toString() {
    return intValue + " - " + strValue;
  }
}


  
